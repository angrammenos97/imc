// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package pec_reg_pkg;

  // Address widths within the block
  parameter int BlockAw = 5;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    struct packed {
      logic        q;
    } start;
    struct packed {
      logic [2:0]  q;
    } operation;
    struct packed {
      logic [3:0]  q;
    } word_line;
    struct packed {
      logic [2:0]  q;
    } bit_line;
    struct packed {
      logic [4:0]  q;
    } write_col_sels;
    struct packed {
      logic [3:0]  q;
    } state;
  } pec_reg2hw_ctrl_reg_t;

  typedef struct packed {
    struct packed {
      logic [7:0]  q;
    } ft_sz;
    struct packed {
      logic [7:0]  q;
    } in_sz;
    struct packed {
      logic [7:0]  q;
    } wg_sz;
    struct packed {
      logic [7:0]  q;
    } ch_sz;
  } pec_reg2hw_layer_size_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } pec_reg2hw_bias_addr_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } pec_reg2hw_in_bit_addr_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } pec_reg2hw_pixel_addr_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
      logic        de;
    } start;
    struct packed {
      logic [2:0]  d;
      logic        de;
    } operation;
    struct packed {
      logic [3:0]  d;
      logic        de;
    } word_line;
    struct packed {
      logic [2:0]  d;
      logic        de;
    } bit_line;
    struct packed {
      logic [4:0]  d;
      logic        de;
    } write_col_sels;
    struct packed {
      logic [3:0]  d;
      logic        de;
    } state;
  } pec_hw2reg_ctrl_reg_t;

  // Register -> HW type
  typedef struct packed {
    pec_reg2hw_ctrl_reg_t ctrl; // [147:128]
    pec_reg2hw_layer_size_reg_t layer_size; // [127:96]
    pec_reg2hw_bias_addr_reg_t bias_addr; // [95:64]
    pec_reg2hw_in_bit_addr_reg_t in_bit_addr; // [63:32]
    pec_reg2hw_pixel_addr_reg_t pixel_addr; // [31:0]
  } pec_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    pec_hw2reg_ctrl_reg_t ctrl; // [25:0]
  } pec_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] PEC_CTRL_OFFSET = 5'h 0;
  parameter logic [BlockAw-1:0] PEC_LAYER_SIZE_OFFSET = 5'h 4;
  parameter logic [BlockAw-1:0] PEC_BIAS_ADDR_OFFSET = 5'h 8;
  parameter logic [BlockAw-1:0] PEC_IN_BIT_ADDR_OFFSET = 5'h c;
  parameter logic [BlockAw-1:0] PEC_PIXEL_ADDR_OFFSET = 5'h 10;

  // Register index
  typedef enum int {
    PEC_CTRL,
    PEC_LAYER_SIZE,
    PEC_BIAS_ADDR,
    PEC_IN_BIT_ADDR,
    PEC_PIXEL_ADDR
  } pec_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] PEC_PERMIT [5] = '{
    4'b 0111, // index[0] PEC_CTRL
    4'b 1111, // index[1] PEC_LAYER_SIZE
    4'b 1111, // index[2] PEC_BIAS_ADDR
    4'b 1111, // index[3] PEC_IN_BIT_ADDR
    4'b 1111  // index[4] PEC_PIXEL_ADDR
  };

endpackage

