# Copyright 2019 ETH Zurich and University of Bologna
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.



before_script:
  - pwd

# after_script:
#   - echo "stage finished"

stages:
  - fetch
  - build
  - test
  - sim_questa_multivers

fetch_tests:
  stage: fetch
  script:
    - echo "Fetching tests"
    - make test-checkout-gitlab
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
      - tests/*

fetch_ips_bender:
  stage: fetch
  script:
    - echo "Fetching IPs using bender"
    - ulimit -Sn 4096
    - BENDER=1 make checkout
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
      # - .bender/*
      #- Bender.lock
      - bender


# This jobs result is too large to produce an artifact
# fetch_sdk:
#   stage: fetch
#   script:
#     - echo "Fetching SDK from releases and setting up paths"
#     - make sdk-gitlab
#   artifacts:
#     paths:
#       - pkg/
#       - env/

build_rtl:
  stage: build
  before_script:
  script:
    - echo "Compiling RTL model and DPI libraries"
    - make build
    - echo "Fetching VIPs"
    - ./rtl/vip/get-vips.sh --yes --gitlab
    - echo "Installing scripts"
    - make install
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
      - tests/*
#      - sim/*
      - rtl/tb/remote_bitbang/* # we want to reuse bitbang lib
      - rtl/vip/*
#      - pkg/* # sdk is too large


lint:
  stage: test
  script:
    - echo "Running Spyglass Lint in rtl_handoff methodology with goal lint_rtl"
    - make lint
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
      - spyglass/working_dir/*
    reports:
      junit: spyglass/working_dir/reports/lint_rtl.report.xml
  dependencies:
    - fetch_ips_bender
  needs:
    - fetch_ips_bender
  

# Use sdk-releases to run all tests
test_sequential_bare:
  stage: test
  before_script:
    - echo "Fetching SDK from releases and setting up paths"
    - make sdk-gitlab
    - echo "Compiling RTL model and DPI libraries"
    - make build
    - echo "Installing scripts"
    - make install
  script:
    - echo "Running sequential bare tests"
    - source env/ci-pulpissimo.sh && make test-sequential-bare
    - echo "Generating junit test results"
    - /usr/sepp/bin/python3.4 -m junit2htmlreport tests/sequential_bare_tests/junit-reports/TEST-*.xml
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
      - tests/sequential_bare_tests/junit-reports/TEST-*.html
      - tests/sequential_bare_tests/junit-reports/TEST-*.xml
    reports:
      junit: tests/sequential_bare_tests/junit-reports/TEST-*.xml

# test_parallel_bare:
#   stage: test
#   before_script:
#     - echo "Fetching SDK from releases and setting up paths"
#     - make sdk-gitlab
#     - echo "Compiling RTL model and DPI libraries"
#     - make build
#     - echo "Installing scripts"
#     - make install
#   script:
#     - echo "Running parallel bare tests"
#     - source env/ci-pulpissimo.sh && make test-parallel-bare
#     - echo "Generating junit test results"
#     - /usr/sepp/bin/python3.4 -m junit2htmlreport tests/parallel_bare_tests/junit-reports/TEST-*.xml
#   artifacts:
#     name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
#     paths:
#       - tests/parallel_bare_tests/junit-reports/TEST-*.html
#       - tests/parallel_bare_tests/junit-reports/TEST-*.xml
#     reports:
#       junit: tests/parallel_bare_tests/junit-reports/TEST-*.xml

# test_pulp:
#   stage: test
#   before_script:
#     - echo "Fetching SDK from releases and setting up paths"
#     - make sdk-gitlab
#     - echo "Compiling RTL model and DPI libraries"
#     - make scripts-bender-vsim-vips
#     - make build
#     - echo "Installing scripts"
#     - make install
#   script:
#     - echo "Running pulp tests"
#     - source env/ci-pulpissimo.sh && make test-pulp
#     - echo "Generating junit test results"
#     - /usr/sepp/bin/python3.4 -m junit2htmlreport tests/pulp_tests/junit-reports/TEST-*.xml
#   artifacts:
#     name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
#     paths:
#       - tests/pulp_tests/junit-reports/TEST-*.html
#       - tests/pulp_tests/junit-reports/TEST-*.xml
#     reports:
#       junit: tests/pulp_tests/junit-reports/TEST-*.xml

test_ml:
  stage: test
  before_script:
    - echo "Fetching SDK from releases and setting up paths"
    - make sdk-gitlab
    - echo "Compiling RTL model and DPI libraries"
    - make build
    - echo "Installing scripts"
    - make install
  script:
    - echo "Running ml tests"
    - source env/ci-pulpissimo.sh && make test-ml
    - echo "Generating junit test results"
    - /usr/sepp/bin/python3.4 -m junit2htmlreport tests/ml_tests/junit-reports/TEST-*.xml
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
      - tests/ml_tests/junit-reports/TEST-*.html
      - tests/ml_tests/junit-reports/TEST-*.xml
    reports:
      junit: tests/ml_tests/junit-reports/TEST-*.xml

test_riscv:
  stage: test
  before_script:
    - echo "Fetching SDK from releases and setting up paths"
    - make sdk-gitlab
    - echo "Compiling RTL model and DPI libraries"
    - make build
    - echo "Installing scripts"
    - make install
  script:
    - echo "Running riscv tests"
    - source env/ci-pulpissimo.sh && make test-riscv
    - echo "Generating junit test results"
    - /usr/sepp/bin/python3.4 -m junit2htmlreport tests/riscv_tests/junit-reports/TEST-*.xml
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
      - tests/riscv_tests/junit-reports/TEST-*.html
      - tests/riscv_tests/junit-reports/TEST-*.xml
    reports:
      junit: tests/riscv_tests/junit-reports/TEST-*.xml

freertos_helloworld:
  stage: test
  before_script:
    - export RISCV=/usr/pack/riscv-1.0-kgf/pulp-gcc-2.5.0
    - git clone https://github.com/pulp-platform/pulp-freertos.git
    - cd pulp-freertos
    - git checkout d6966cae9471b7a592bd09b7acfd5b832666e3b5
    - git submodule update --init --recursive
    - cd ..
  script:
    - make scripts
    - make clean build
    - source setup/vsim.sh
    - cd pulp-freertos
    - source env/pulpissimo-cv32e40p.sh
    - cd tests/hello_world_pmsis
    - make all run

# test_rt:
#   stage: test
#   before_script:
#     - echo "Fetching SDK from releases and setting up paths"
#     - make sdk-gitlab
#     - echo "Compiling RTL model and DPI libraries"
#     - make scripts-bender-vsim-vips
#     - make build
#     - echo "Installing scripts"
#     - make install
#   script:
#     - echo "Running rt tests"
#     - source env/ci-pulpissimo.sh && make test-rt
#     - echo "Generating junit test results"
#     - /usr/sepp/bin/python3.4 -m junit2htmlreport tests/rt-tests/junit-reports/TEST-*.xml
#   artifacts:
#     name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
#     paths:
#       - tests/rt-tests/junit-reports/TEST-*.html
#       - tests/rt-tests/junit-reports/TEST-*.xml
#     reports:
#       junit: tests/rt-tests/junit-reports/TEST-*.xml

# Use simplified pulp-runtime to run a subset of tests
# test_simplified_sw:
#   stage: test
#   before_script:
#     - echo "Fetching Runtime"
#     - make pulp-runtime
#     - echo "Compiling RTL model and DPI libraries"
#     - make build
#     - echo "Installing scripts"
#     - make install
#   script:
#     - echo "Running software test"
#     - source pulp-runtime/configs/pulpissimo.sh && make test-runtime-gitlab
#     - echo "Generating junit test results"
#     - /usr/sepp/bin/python3.4 -m junit2htmlreport tests/rt-tests/junit-reports/TEST-*.xml
#   artifacts:
#     name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
#     paths:
#       - tests/*.html
#       - tests/*.xml
#     reports:
#       junit: tests/*.xml

# Built SDK with the `make sdk` target and run all tests
# test_sw_build_sdk:
#   variables:
#     PULP_RISCV_GCC_TOOLCHAIN: your-compiler-path
#   stage: test
#   before_script:
#     - echo "Compiling RTL model and DPI libraries"
#     - make build
#     - echo "Installing scripts" # don't call this, breaks build
#     - make install
#     - echo "Building SDK"
#     - make sdk
#   script:
#     - echo "Running software tests with built SDK"
#     - make test-gitlab2
#     - echo "Generating junit test results"
#     - /usr/sepp/bin/python3.4 -m junit2htmlreport tests/junit-reports/TEST-*.xml
#   artifacts:
#     paths:
#       - tests/junit-reports/TEST-*.html
#       - tests/junit-reports/TEST-*.xml
#     reports:
#       junit: tests/junit-reports/TEST-*.xml

test_dm:
  stage: test
  before_script:
  script:
    - echo "(Re)generating scripts with DPI disabled"
    - make scripts
    - echo "Setting up vsim path"
    - source setup/vsim.sh
    - echo "Running debug module testbench"
    # Note that the program is irrelevant we just put something for it to not complain
    - cd sim/ && make all simc VSIM_FLAGS="+jtag_dm_tests +srec=../rtl/tb/srec/min.srec"

fpga_synth_genesys2:
  stage: test
  before_script:
  script:
    - echo "(Re)generating scripts"
    - make scripts
    - echo "Starting synthesis with vivado"
    - cd fpga/ && make genesys2 VIVADO='vivado-2019.1.1 vivado'
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
      - fpga/pulpissimo_genesys2.bit
      - fpga/pulpissimo_genesys2.bin
      - fpga/*.jou
      - fpga/*.log
      - fpga/*.str
      - fpga/pulpissimo-genesys2/reports
      - fpga/pulpissimo-genesys2/rtl
      - fpga/pulpissimo-genesys2/tcl
      - fpga/pulpissimo-genesys2/pulpissimo_genesys2.xpr
      - fpga/pulpissimo-genesys2/fpga-settings.mk
      - fpga/pulpissimo-genesys2/*.log
      - fpga/pulpissimo-genesys2/*.cfg
      - fpga/pulpissimo-genesys2/*.gdb
      - fpga/pulpissimo-genesys2/*.jou
      - fpga/pulpissimo-genesys2/*.log

fpga_synth_nexys_video:
  stage: test
  before_script:
  script:
    - echo "(Re)generating scripts"
    - make scripts
    - echo "Starting synthesis with vivado"
    - cd fpga/ && make nexys_video VIVADO='vivado-2019.1.1 vivado'
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
      - fpga/pulpissimo_nexys_video.bit
      - fpga/pulpissimo_nexys_video.bin
      - fpga/*.jou
      - fpga/*.log
      - fpga/*.str
      - fpga/pulpissimo-nexys_video/reports
      - fpga/pulpissimo-nexys_video/rtl
      - fpga/pulpissimo-nexys_video/tcl
      - fpga/pulpissimo-nexys_video/pulpissimo_nexys_video.xpr
      - fpga/pulpissimo-nexys_video/fpga-settings.mk
      - fpga/pulpissimo-nexys_video/*.log
      - fpga/pulpissimo-nexys_video/*.cfg
      - fpga/pulpissimo-nexys_video/*.gdb
      - fpga/pulpissimo-nexys_video/*.jou
      - fpga/pulpissimo-nexys_video/*.log

fpga_synth_nexys:
  stage: test
  before_script:
  script:
    - echo "(Re)generating scripts"
    - make scripts
    - echo "Starting synthesis with vivado"
    - cd fpga/ && make nexys rev=nexys4 VIVADO='vivado-2019.1.1 vivado'
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
      - fpga/pulpissimo_nexys.bit
      - fpga/pulpissimo_nexys.bin
      - fpga/*.jou
      - fpga/*.log
      - fpga/*.str
      - fpga/pulpissimo-nexys/reports
      - fpga/pulpissimo-nexys/rtl
      - fpga/pulpissimo-nexys/tcl
      - fpga/pulpissimo-nexys/pulpissimo_nexys.xpr
      - fpga/pulpissimo-nexys/fpga-settings.mk
      - fpga/pulpissimo-nexys/*.log
      - fpga/pulpissimo-nexys/*.cfg
      - fpga/pulpissimo-nexys/*.gdb
      - fpga/pulpissimo-nexys/*.jou
      - fpga/pulpissimo-nexys/*.log

fpga_synth_nexys_zcu104:
  stage: test
  before_script:
  script:
    - echo "(Re)generating scripts"
    - make scripts
    - echo "Starting synthesis with vivado"
    - cd fpga/ && make zcu104 VIVADO='vivado-2019.1.1 vivado'
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
      - fpga/pulpissimo_zcu104.bit
      - fpga/pulpissimo_zcu104.bin
      - fpga/*.jou
      - fpga/*.log
      - fpga/*.str
      - fpga/pulpissimo-zcu104/reports
      - fpga/pulpissimo-zcu104/rtl
      - fpga/pulpissimo-zcu104/tcl
      - fpga/pulpissimo-zcu104/pulpissimo_zcu104.xpr
      - fpga/pulpissimo-zcu104/fpga-settings.mk
      - fpga/pulpissimo-zcu104/*.log
      - fpga/pulpissimo-zcu104/*.cfg
      - fpga/pulpissimo-zcu104/*.gdb
      - fpga/pulpissimo-zcu104/*.jou
      - fpga/pulpissimo-zcu104/*.log

# fpga_synth_zedboard:
#   stage: test
#   before_script:
#   script:
#     - echo "(Re)generating scripts"
#     - make scripts
#     - echo "Starting synthesis with vivado"
#     - cd fpga/ && make zedboard VIVADO='vivado-2019.1.1 vivado'
#   artifacts:
#     name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
#     paths:
#       - fpga/pulpissimo_zedboard.bit
#       - fpga/pulpissimo_zedboard.bin
#       - fpga/*.jou
#       - fpga/*.log
#       - fpga/*.str
#       - fpga/pulpissimo-zedboard/reports
#       - fpga/pulpissimo-zedboard/rtl
#       - fpga/pulpissimo-zedboard/tcl
#       - fpga/pulpissimo-zedboard/pulpissimo_zedboard.xpr
#       - fpga/pulpissimo-zedboard/fpga-settings.mk
#       - fpga/pulpissimo-zedboard/*.log
#       - fpga/pulpissimo-zedboard/*.cfg
#       - fpga/pulpissimo-zedboard/*.gdb
#       - fpga/pulpissimo-zedboard/*.jou
#       - fpga/pulpissimo-zedboard/*.log

fpga_synth_zcu102:
  stage: test
  before_script:
  script:
    - echo "(Re)generating scripts"
    - make scripts
    - echo "Starting synthesis with vivado"
    - cd fpga/ && make zcu102 VIVADO='vivado-2019.1.1 vivado'
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
      - fpga/pulpissimo_zcu102.bit
      - fpga/pulpissimo_zcu102.bin
      - fpga/*.jou
      - fpga/*.log
      - fpga/*.str
      - fpga/pulpissimo-zcu102/reports
      - fpga/pulpissimo-zcu102/rtl
      - fpga/pulpissimo-zcu102/tcl
      - fpga/pulpissimo-zcu102/pulpissimo_zcu102.xpr
      - fpga/pulpissimo-zcu102/fpga-settings.mk
      - fpga/pulpissimo-zcu102/*.log
      - fpga/pulpissimo-zcu102/*.cfg
      - fpga/pulpissimo-zcu102/*.gdb
      - fpga/pulpissimo-zcu102/*.jou
      - fpga/pulpissimo-zcu102/*.log

sim_questa_multivers:
  stage: sim_questa_multivers
  allow_failure: true
  when: always
  parallel:
    matrix:
      - QUESTA_PREFIX:
        - 'vsim'                   # Default
        - 'questa-2019.3-kgf vsim'
        - 'questa-2020.1-kgf vsim'
        - 'questa-2021.1-bt vsim'  # Has errors
        - 'questa-2021.2-bt vsim'  # Has errors
        - 'vsim-10.0d-kgf'         # Incompatible
        - 'vsim-10.1c-kgf'         # Incompatible
        - 'vsim-10.2c-kgf'         # Incompatible
        - 'vsim-10.3a-kgf'         # Incompatible
        - 'vsim-10.3e-kgf'         # Incompatible
        - 'vsim-10.4c-kgf'         # Incompatible
        - 'vsim-10.5a-kgf'         # Incompatible
        - 'vsim-10.5c-kgf'
        - 'vsim-10.6b-kgf'
        - 'vsim-10.7b-kgf'
        - 'vsim-10.7e-kgf'
  before_script:
    - export VSIM="$QUESTA_PREFIX"
    - export VLOG="${QUESTA_PREFIX/vsim/vlog}"
    - export VOPT="${QUESTA_PREFIX/vsim/vopt}"
    - export VLIB="${QUESTA_PREFIX/vsim/vlib}"
    - export VMAP="${QUESTA_PREFIX/vsim/vmap}"
    - export VCOM="${QUESTA_PREFIX/vsim/vcom}"
    - export PULP_RISCV_GCC_TOOLCHAIN=/usr/pack/riscv-1.0-kgf/pulp-gcc-1.0.16
    - git clone https://github.com/pulp-platform/pulp-runtime.git -b v0.0.15
    - mkdir hello
    - printf "#include <stdio.h>\nint main(){\n  printf(\"Hello World\\\n\");\n  return 0;\n}\n" > hello/hello.c
    - printf "PULP_APP = hello\nPULP_APP_FC_SRCS = hello.c\nPULP_APP_HOST_SRCS = hello.c\nPULP_CFLAGS = -O3 -g\n\ninclude \$(PULP_SDK_HOME)/install/rules/pulp_rt.mk\n" > hello/Makefile
  script:
    - make scripts
    - make clean build
    - source setup/vsim.sh
    - source pulp-runtime/configs/pulpissimo_cv32.sh
    - make -C hello clean all run
  dependencies:
    - fetch_ips_bender
  needs:
    - fetch_ips_bender

spi_boot:
  stage: test
  before_script:
    - git clone https://github.com/pulp-platform/pulp-runtime.git -b v0.0.15
    - mkdir hello
    - export PULP_RISCV_GCC_TOOLCHAIN=/usr/pack/riscv-1.0-kgf/pulp-gcc-2.5.0
    - printf "#include <stdio.h>\nint main(){\n  printf(\"Hello World\\\n\");\n  return 0;\n}\n" > hello/hello.c
    - printf "PULP_APP = hello\nPULP_APP_FC_SRCS = hello.c\nPULP_APP_HOST_SRCS = hello.c\nPULP_CFLAGS = -O3 -g\n\ninclude \$(PULP_SDK_HOME)/install/rules/pulp_rt.mk\n" > hello/Makefile
  script:
    - make scripts-bender-vsim-vips all
    - source setup/vsim.sh
    - source pulp-runtime/configs/pulpissimo_cv32.sh
    - make -C hello clean all run bootmode=spi PULP_RUNTIME_GCC_TOOLCHAIN=/usr/pack/riscv-1.0-kgf/pulp-gcc-2.5.0
