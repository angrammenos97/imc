// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module pec_reg_top #(
  parameter type reg_req_t = logic,
  parameter type reg_rsp_t = logic,
  parameter int AW = 5
) (
  input logic clk_i,
  input logic rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output pec_reg_pkg::pec_reg2hw_t reg2hw, // Write
  input  pec_reg_pkg::pec_hw2reg_t hw2reg, // Read


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import pec_reg_pkg::* ;

  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [BlockAw-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr[BlockAw-1:0];
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic ctrl_start_qs;
  logic ctrl_start_wd;
  logic ctrl_start_we;
  logic [2:0] ctrl_operation_qs;
  logic [2:0] ctrl_operation_wd;
  logic ctrl_operation_we;
  logic [3:0] ctrl_word_line_qs;
  logic [3:0] ctrl_word_line_wd;
  logic ctrl_word_line_we;
  logic [2:0] ctrl_bit_line_qs;
  logic [2:0] ctrl_bit_line_wd;
  logic ctrl_bit_line_we;
  logic [4:0] ctrl_write_col_sels_qs;
  logic [4:0] ctrl_write_col_sels_wd;
  logic ctrl_write_col_sels_we;
  logic [3:0] ctrl_state_qs;
  logic [3:0] ctrl_state_wd;
  logic ctrl_state_we;
  logic [7:0] layer_size_ft_sz_qs;
  logic [7:0] layer_size_ft_sz_wd;
  logic layer_size_ft_sz_we;
  logic [7:0] layer_size_in_sz_qs;
  logic [7:0] layer_size_in_sz_wd;
  logic layer_size_in_sz_we;
  logic [7:0] layer_size_wg_sz_qs;
  logic [7:0] layer_size_wg_sz_wd;
  logic layer_size_wg_sz_we;
  logic [7:0] layer_size_ch_sz_qs;
  logic [7:0] layer_size_ch_sz_wd;
  logic layer_size_ch_sz_we;
  logic [31:0] bias_addr_wd;
  logic bias_addr_we;
  logic [31:0] in_bit_addr_wd;
  logic in_bit_addr_we;
  logic [31:0] pixel_addr_wd;
  logic pixel_addr_we;

  // Register instances
  // R[ctrl]: V(False)

  //   F[start]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ctrl_start (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_start_we),
    .wd     (ctrl_start_wd),

    // from internal hardware
    .de     (hw2reg.ctrl.start.de),
    .d      (hw2reg.ctrl.start.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.start.q ),

    // to register interface (read)
    .qs     (ctrl_start_qs)
  );


  //   F[operation]: 3:1
  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_ctrl_operation (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_operation_we),
    .wd     (ctrl_operation_wd),

    // from internal hardware
    .de     (hw2reg.ctrl.operation.de),
    .d      (hw2reg.ctrl.operation.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.operation.q ),

    // to register interface (read)
    .qs     (ctrl_operation_qs)
  );


  //   F[word_line]: 7:4
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_ctrl_word_line (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_word_line_we),
    .wd     (ctrl_word_line_wd),

    // from internal hardware
    .de     (hw2reg.ctrl.word_line.de),
    .d      (hw2reg.ctrl.word_line.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.word_line.q ),

    // to register interface (read)
    .qs     (ctrl_word_line_qs)
  );


  //   F[bit_line]: 10:8
  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_ctrl_bit_line (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_bit_line_we),
    .wd     (ctrl_bit_line_wd),

    // from internal hardware
    .de     (hw2reg.ctrl.bit_line.de),
    .d      (hw2reg.ctrl.bit_line.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.bit_line.q ),

    // to register interface (read)
    .qs     (ctrl_bit_line_qs)
  );


  //   F[write_col_sels]: 15:11
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_ctrl_write_col_sels (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_write_col_sels_we),
    .wd     (ctrl_write_col_sels_wd),

    // from internal hardware
    .de     (hw2reg.ctrl.write_col_sels.de),
    .d      (hw2reg.ctrl.write_col_sels.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.write_col_sels.q ),

    // to register interface (read)
    .qs     (ctrl_write_col_sels_qs)
  );


  //   F[state]: 19:16
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_ctrl_state (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_state_we),
    .wd     (ctrl_state_wd),

    // from internal hardware
    .de     (hw2reg.ctrl.state.de),
    .d      (hw2reg.ctrl.state.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.state.q ),

    // to register interface (read)
    .qs     (ctrl_state_qs)
  );


  // R[layer_size]: V(False)

  //   F[ft_sz]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_layer_size_ft_sz (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (layer_size_ft_sz_we),
    .wd     (layer_size_ft_sz_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.layer_size.ft_sz.q ),

    // to register interface (read)
    .qs     (layer_size_ft_sz_qs)
  );


  //   F[in_sz]: 15:8
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_layer_size_in_sz (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (layer_size_in_sz_we),
    .wd     (layer_size_in_sz_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.layer_size.in_sz.q ),

    // to register interface (read)
    .qs     (layer_size_in_sz_qs)
  );


  //   F[wg_sz]: 23:16
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_layer_size_wg_sz (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (layer_size_wg_sz_we),
    .wd     (layer_size_wg_sz_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.layer_size.wg_sz.q ),

    // to register interface (read)
    .qs     (layer_size_wg_sz_qs)
  );


  //   F[ch_sz]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_layer_size_ch_sz (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (layer_size_ch_sz_we),
    .wd     (layer_size_ch_sz_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.layer_size.ch_sz.q ),

    // to register interface (read)
    .qs     (layer_size_ch_sz_qs)
  );


  // R[bias_addr]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_bias_addr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (bias_addr_we),
    .wd     (bias_addr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bias_addr.q ),

    .qs     ()
  );


  // R[in_bit_addr]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_in_bit_addr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (in_bit_addr_we),
    .wd     (in_bit_addr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.in_bit_addr.q ),

    .qs     ()
  );


  // R[pixel_addr]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_pixel_addr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pixel_addr_we),
    .wd     (pixel_addr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pixel_addr.q ),

    .qs     ()
  );




  logic [4:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[0] = (reg_addr == PEC_CTRL_OFFSET);
    addr_hit[1] = (reg_addr == PEC_LAYER_SIZE_OFFSET);
    addr_hit[2] = (reg_addr == PEC_BIAS_ADDR_OFFSET);
    addr_hit[3] = (reg_addr == PEC_IN_BIT_ADDR_OFFSET);
    addr_hit[4] = (reg_addr == PEC_PIXEL_ADDR_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[0] & (|(PEC_PERMIT[0] & ~reg_be))) |
               (addr_hit[1] & (|(PEC_PERMIT[1] & ~reg_be))) |
               (addr_hit[2] & (|(PEC_PERMIT[2] & ~reg_be))) |
               (addr_hit[3] & (|(PEC_PERMIT[3] & ~reg_be))) |
               (addr_hit[4] & (|(PEC_PERMIT[4] & ~reg_be)))));
  end

  assign ctrl_start_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_start_wd = reg_wdata[0];

  assign ctrl_operation_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_operation_wd = reg_wdata[3:1];

  assign ctrl_word_line_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_word_line_wd = reg_wdata[7:4];

  assign ctrl_bit_line_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_bit_line_wd = reg_wdata[10:8];

  assign ctrl_write_col_sels_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_write_col_sels_wd = reg_wdata[15:11];

  assign ctrl_state_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_state_wd = reg_wdata[19:16];

  assign layer_size_ft_sz_we = addr_hit[1] & reg_we & !reg_error;
  assign layer_size_ft_sz_wd = reg_wdata[7:0];

  assign layer_size_in_sz_we = addr_hit[1] & reg_we & !reg_error;
  assign layer_size_in_sz_wd = reg_wdata[15:8];

  assign layer_size_wg_sz_we = addr_hit[1] & reg_we & !reg_error;
  assign layer_size_wg_sz_wd = reg_wdata[23:16];

  assign layer_size_ch_sz_we = addr_hit[1] & reg_we & !reg_error;
  assign layer_size_ch_sz_wd = reg_wdata[31:24];

  assign bias_addr_we = addr_hit[2] & reg_we & !reg_error;
  assign bias_addr_wd = reg_wdata[31:0];

  assign in_bit_addr_we = addr_hit[3] & reg_we & !reg_error;
  assign in_bit_addr_wd = reg_wdata[31:0];

  assign pixel_addr_we = addr_hit[4] & reg_we & !reg_error;
  assign pixel_addr_wd = reg_wdata[31:0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = ctrl_start_qs;
        reg_rdata_next[3:1] = ctrl_operation_qs;
        reg_rdata_next[7:4] = ctrl_word_line_qs;
        reg_rdata_next[10:8] = ctrl_bit_line_qs;
        reg_rdata_next[15:11] = ctrl_write_col_sels_qs;
        reg_rdata_next[19:16] = ctrl_state_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[7:0] = layer_size_ft_sz_qs;
        reg_rdata_next[15:8] = layer_size_in_sz_qs;
        reg_rdata_next[23:16] = layer_size_wg_sz_qs;
        reg_rdata_next[31:24] = layer_size_ch_sz_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[3]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[4]: begin
        reg_rdata_next[31:0] = '0;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule

module pec_reg_top_intf
#(
  parameter int AW = 5,
  localparam int DW = 32
) (
  input logic clk_i,
  input logic rst_ni,
  REG_BUS.in  regbus_slave,
  // To HW
  output pec_reg_pkg::pec_reg2hw_t reg2hw, // Write
  input  pec_reg_pkg::pec_hw2reg_t hw2reg, // Read
  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);
 localparam int unsigned STRB_WIDTH = DW/8;

`include "register_interface/typedef.svh"
`include "register_interface/assign.svh"

  // Define structs for reg_bus
  typedef logic [AW-1:0] addr_t;
  typedef logic [DW-1:0] data_t;
  typedef logic [STRB_WIDTH-1:0] strb_t;
  `REG_BUS_TYPEDEF_ALL(reg_bus, addr_t, data_t, strb_t)

  reg_bus_req_t s_reg_req;
  reg_bus_rsp_t s_reg_rsp;
  
  // Assign SV interface to structs
  `REG_BUS_ASSIGN_TO_REQ(s_reg_req, regbus_slave)
  `REG_BUS_ASSIGN_FROM_RSP(regbus_slave, s_reg_rsp)

  

  pec_reg_top #(
    .reg_req_t(reg_bus_req_t),
    .reg_rsp_t(reg_bus_rsp_t),
    .AW(AW)
  ) i_regs (
    .clk_i,
    .rst_ni,
    .reg_req_i(s_reg_req),
    .reg_rsp_o(s_reg_rsp),
    .reg2hw, // Write
    .hw2reg, // Read
    .devmode_i
  );
  
endmodule


